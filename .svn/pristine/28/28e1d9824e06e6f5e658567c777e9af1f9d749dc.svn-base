/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diemdo.web.bean;

import diemdo.ADiemdo;
import diemdo.ADiemdoMix;
import diemdo.ADiemdoNhom;
import diemdo.ALstLoaiDd;
import diemdo.ALstTcDd;
import diemdo.ALstUlevel;
import diemdo.remote.IDiemDoRemote;
import java.io.Serializable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import main.ContextResources.EjbContext;
import main.entity.shared.system.S_Assets;
import main.web.common.bean.BasePageCommon;
import main.web.common.bean.WorkingContext;
import org.primefaces.PrimeFaces;

/**
 *
 * @author TUYEN EVN
 */
@ManagedBean
@ViewScoped
public class DiemDo_DiemDoDetailBean extends BasePageCommon implements Serializable {

    private ADiemdoMix diemDo;
    private IDiemDoRemote iDiemDoRemote;
    private ADiemdoNhom nhomDDSelected;
    private ALstLoaiDd loaiDDSelected;
    private ALstTcDd TcDDSelected;
    private ALstUlevel UlevelSelected;
    private S_Assets orgidRefSelected;
    private boolean disableInput;
    private List<ADiemdoNhom> ListTenAndMaDD = new ArrayList<>();
    private List<ALstLoaiDd> listLoaiDD = new ArrayList<>();
    private List<ALstTcDd> listTcDD = new ArrayList<>();
    private List<ALstUlevel> listUlevel = new ArrayList<>();
    private List<S_Assets> listOrganization = new ArrayList<>();
    //false = edit mode
    private boolean isAdd = true;

    public DiemDo_DiemDoDetailBean() {
        try {
            //prepare data for dialog
            diemDo = new ADiemdoMix();
            nhomDDSelected = new ADiemdoNhom();
            loaiDDSelected = new ALstLoaiDd();
            TcDDSelected = new ALstTcDd();
            UlevelSelected = new ALstUlevel();
            getAllListTenAndMaDD();
            listLoaiDD = getIDiemDoRemote().getAllLoaiDD();
            listTcDD = getIDiemDoRemote().getAllTcDD();
            listUlevel = getIDiemDoRemote().getAllUlevel();
            listOrganization = getIDiemDoRemote().getAllOganization();

            //set default for combobox
            loaiDDSelected = listLoaiDD.get(0);
            TcDDSelected = listTcDD.get(0);
            UlevelSelected = listUlevel.get(0);
            orgidRefSelected= listOrganization.get(0);
            diemDo.setItVh(BigInteger.valueOf(0));
            diemDo.setTrangThai(BigInteger.valueOf(1));
            diemDo.setItVhToBoolean(false);
            diemDo.setTrangThaiToBoolean(true);
            disableInput = false;

            //get maDD of diemdoSelected from diemdo.xhtml            
            String maDD = WorkingContext.getRequestQueryString("maDD");
            if (maDD != null) {
                //switch to edit mode
                isAdd = false;
                disableInput = true;
                diemDo = getIDiemDoRemote().getDiemDoMixByID(maDD);
                nhomDDSelected = new ADiemdoNhom(diemDo.getMaNhomDd().getMaNhomDd(),
                        diemDo.getMaNhomDd().getTenNhomDd());
            }else{
                disableInput = false;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public BigInteger booleanToInt(boolean  b){
        int x = 0;
        if (b) {
            x = 1;
        } else {
            x = 0;
        }
        return BigInteger.valueOf(x);
    }
    
    //event when click button Save
    public void onSaveDiemdo() {
        try {
            if (isAdd) {
                AddNewDD();
            } else {
                ADiemdo diemDoSave = new ADiemdo(diemDo.getMaDiemdo(), diemDo.getMaLoaiDd(), diemDo.getNgayVh(), diemDo.getUserCrId(), diemDo.getUserCrDtime(), diemDo.getOrgid());
                //Set attribute for edit
                diemDoSave.setTenDiemdo(diemDo.getTenDiemdo());
                diemDoSave.setMaCto(diemDo.getMaCto());
                diemDoSave.setMoTa(diemDo.getMoTa());
                diemDoSave.setNgayKt(diemDo.getNgayKt());
                diemDoSave.setItVh(booleanToInt(diemDo.isItVhToBoolean()));
                diemDoSave.setOrgidRef(diemDo.getOrgidRef());
                diemDoSave.setMaDiemdoRef(diemDo.getMaDiemdoRef());
                diemDoSave.setUlevelid(UlevelSelected.getUlevelid());
                diemDoSave.setMaTcDd(TcDDSelected.getMaTcDd());
                diemDoSave.setMaLoaiDd(loaiDDSelected.getMaLoaiDd());
                diemDoSave.setMaNhomDd(new ADiemdoNhom(nhomDDSelected.getMaNhomDd(), nhomDDSelected.getTenNhomDd()));
                diemDoSave.setTrangThai(booleanToInt(diemDo.isTrangThaiToBoolean()));
                diemDoSave.setStt(diemDo.getStt());
                diemDoSave.setUserMdfDtime(new Date(System.currentTimeMillis()));
                diemDoSave.setUserMdfId(WorkingContext.getUserName());
                //update to db
                getIDiemDoRemote().update(diemDoSave);
                //alert
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chỉnh sửa thành công"));
                PrimeFaces.current().ajax().update("CreateForm:messages");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //set attribute for new object DiemDo then update to database
    public void AddNewDD() {
        try {
            ADiemdo diemDoSave = new ADiemdo(diemDo.getMaDiemdo(), loaiDDSelected.getMaLoaiDd(), diemDo.getNgayVh(), WorkingContext.getUserName(), new Date(System.currentTimeMillis()), WorkingContext.getOrganizationCurrent());
            //set attributes in combobox
            diemDoSave.setUlevelid(UlevelSelected.getUlevelid());
            diemDoSave.setMaTcDd(TcDDSelected.getMaTcDd());
            if (checkInput()) {
                //set other attributes
                diemDoSave.setTenDiemdo(diemDo.getTenDiemdo());
                diemDoSave.setMaCto(diemDo.getMaCto());
                diemDoSave.setMoTa(diemDo.getMoTa());
                diemDoSave.setNgayKt(diemDo.getNgayKt());
                diemDoSave.setItVh(booleanToInt(diemDo.isItVhToBoolean()));
                diemDoSave.setOrgidRef(diemDo.getOrgidRef());
                diemDoSave.setMaDiemdoRef(diemDo.getMaDiemdoRef());
                diemDoSave.setUlevelid(UlevelSelected.getUlevelid());
                diemDoSave.setMaTcDd(TcDDSelected.getMaTcDd());
                diemDoSave.setMaNhomDd(new ADiemdoNhom(nhomDDSelected.getMaNhomDd(), nhomDDSelected.getTenNhomDd()));
                diemDoSave.setTrangThai(booleanToInt(diemDo.isTrangThaiToBoolean()));
                diemDoSave.setStt(diemDo.getStt());
                diemDoSave.setUserMdfDtime(new Date(System.currentTimeMillis()));
                diemDoSave.setUserMdfId(WorkingContext.getUserName());
                //update to DB
                getIDiemDoRemote().insert(diemDoSave);
                //alert
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Thêm moiws thành công"));
                PrimeFaces.current().ajax().update("CreateForm:messages");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Check input before save changing to db
    public boolean checkInput() {
        if (diemDo.getMaDiemdo() == null) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Mã điểm đo không được để trống!"));
            PrimeFaces.current().ajax().update("CreateForm:messages");
            return false;
        }
        if (loaiDDSelected.getMaLoaiDd() == null) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Loại điểm đo không được để trống!"));
            PrimeFaces.current().ajax().update("CreateForm:messages");
            return false;
        }
        if (diemDo.getNgayVh() == null) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Ngày hiệu lực không được để trống!"));
            PrimeFaces.current().ajax().update("CreateForm:messages");
            return false;
        }
        if (IsMaDiemDoIsExits()) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Mã điểm đo đã tồn tại!"));
            PrimeFaces.current().ajax().update("CreateForm:messages");
            return false;
        }
        return true;
    }

    //check duplicate ma nhom diem do
    public boolean IsMaDiemDoIsExits() {
        try {
            List<ADiemdo> list = getIDiemDoRemote().getAllDiemDo();
            return list.stream().anyMatch((item) -> (diemDo.getMaDiemdo().equals(item.getMaDiemdo())));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    //do something I don't know
    public void onMaDDChange() {
        //do nothing
    }

    //get name and maDD for combobox
    public void getAllListTenAndMaDD() {
        try {
            List<ADiemdoNhom> listDiemDoNhom = getIDiemDoRemote().getAllDiemDoNhom();
            for (ADiemdoNhom item : listDiemDoNhom) {
                String tenNhomDD = item.getTenNhomDd();
                String maNhomDD = item.getMaNhomDd();
                ListTenAndMaDD.add(new ADiemdoNhom(maNhomDD, tenNhomDD));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean isDisableInput() {
        return disableInput;
    }

    public void setDisableInput(boolean disableInput) {
        this.disableInput = disableInput;
    }

    public S_Assets getOrgidRefSelected() {
        return orgidRefSelected;
    }

    public void setOrgidRefSelected(S_Assets orgidRefSelected) {
        this.orgidRefSelected = orgidRefSelected;
    }

    public List<S_Assets> getListOrganization() {
        return listOrganization;
    }

    public void setListOrganization(List<S_Assets> listOrganization) {
        this.listOrganization = listOrganization;
    }

    public ADiemdoMix getDiemDo() {
        return diemDo;
    }

    public void setDiemDo(ADiemdoMix diemDo) {
        this.diemDo = diemDo;
    }

    public ALstUlevel getUlevelSelected() {
        return UlevelSelected;
    }

    public void setUlevelSelected(ALstUlevel UlevelSelected) {
        this.UlevelSelected = UlevelSelected;
    }

    public List<ALstUlevel> getListUlevel() {
        return listUlevel;
    }

    public void setListUlevel(List<ALstUlevel> listUlevel) {
        this.listUlevel = listUlevel;
    }

    public ALstTcDd getTcDDSelected() {
        return TcDDSelected;
    }

    public void setTcDDSelected(ALstTcDd TcDDSelected) {
        this.TcDDSelected = TcDDSelected;
    }

    public List<ALstTcDd> getListTcDD() {
        return listTcDD;
    }

    public void setListTcDD(List<ALstTcDd> listTcDD) {
        this.listTcDD = listTcDD;
    }

    public ALstLoaiDd getLoaiDDSelected() {
        return loaiDDSelected;
    }

    public void setLoaiDDSelected(ALstLoaiDd loaiDDSelected) {
        this.loaiDDSelected = loaiDDSelected;
    }

    public List<ALstLoaiDd> getListLoaiDD() {
        return listLoaiDD;
    }

    public void setListLoaiDD(List<ALstLoaiDd> listLoaiDD) {
        this.listLoaiDD = listLoaiDD;
    }

    public List<ADiemdoNhom> getListTenAndMaDD() {
        return ListTenAndMaDD;
    }

    public void setListTenAndMaDD(List<ADiemdoNhom> ListTenAndMaDD) {
        this.ListTenAndMaDD = ListTenAndMaDD;
    }

    public ADiemdoNhom getNhomDDSelected() {
        return nhomDDSelected;
    }

    public void setNhomDDSelected(ADiemdoNhom nhomDDSelected) {
        this.nhomDDSelected = nhomDDSelected;
    }

    public boolean isIsAdd() {
        return isAdd;
    }

    public void setIsAdd(boolean isAdd) {
        this.isAdd = isAdd;
    }

    public IDiemDoRemote getIDiemDoRemote() {
        try {
            if (iDiemDoRemote == null) {
                iDiemDoRemote = (IDiemDoRemote) EjbContext.getLocalEJBRemote(IDiemDoRemote.class.getSimpleName());
            } else {
                EjbContext.LoginEJB();//Login lại khi gọi ejb
            }
        } catch (Exception ex) {
            return null;
        }
        return iDiemDoRemote;
    }
}
