package diemdo.web;

import diemdo.ADiemdo;
import diemdo.ADiemdoNhom;
import diemdo.remote.IDiemDoRemote;
import main.web.common.bean.BasePageCommon;
import java.io.Serializable;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import main.ContextResources.EjbContext;
import org.primefaces.PrimeFaces;

@ManagedBean
@ViewScoped
public class DiemDoBean extends BasePageCommon implements Serializable {

    private List<ADiemdoNhom> listDiemDoNhom;
    private List<ADiemdo> listDiemdo;
    private List<ADiemdo> listDiemDoSelected;
    private List<ADiemdoNhom> listDiemDoNhomSelected;
    private IDiemDoRemote iDiemDoRemote;
    private String ngayVHToString;

    public DiemDoBean() {
        this.listDiemDoNhom = getIDiemDoRemote().getAllDiemDoNhom();
        this.listDiemdo = getIDiemDoRemote().getAllDiemDo();
    }

    //event of 3 button in NhomDD datatable
    //open dialog when click on Add Button
    public void onAddNhom() {
        try {
            //display dialog create
            PrimeFaces.current().ajax().addCallbackParam("Method", "openDialogNhom");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    //open dialog when click on Edit Button
    public void onEditNhom() {
        try {
            if (!listDiemDoNhomSelected.isEmpty()) {
                if (listDiemDoNhomSelected.size() == 1) {
                    PrimeFaces.current().ajax().addCallbackParam("Method", "openEditDialogNhom");
                    PrimeFaces.current().ajax().addCallbackParam("maNhomDD", listDiemDoNhomSelected.get(0).getMaNhomDd());
                } else {
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để sửa"));
                    PrimeFaces.current().ajax().update("formNhom:messages");
                }
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để sửa"));
                PrimeFaces.current().ajax().update("formNhom:messages");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    //open dialog when click on Delete Button
    public void onDeleteNhom() {
        try {
            if (!listDiemDoNhomSelected.isEmpty()) {
                PrimeFaces.current().ajax().addCallbackParam("Method", "openDeleteDialogNhom");
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để xóa"));
                PrimeFaces.current().ajax().update("formNhom:messages");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Delete item from db when user confirm in DelDialog
    public void doDeleteNhom() {
        try {
            listDiemDoNhomSelected.stream().forEach((item) -> {
                getIDiemDoRemote().delete(item.getMaNhomDd(), ADiemdoNhom.class);
            });

            //update main page
            PrimeFaces.current().executeScript("listNhom.filter();");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    //event of 3 button in Diemdo datatable
    //Open dialog when click on Add button
    public void onAddDiemDo() {
        try {
            PrimeFaces.current().ajax().addCallbackParam("Method", "openDialogDiemDo");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    //Open dialog when click on Edit button
    public void onEdiDiemDo() {
        try {
            if (!listDiemDoSelected.isEmpty()) {
                if (listDiemDoSelected.size() == 1) {
                    PrimeFaces.current().ajax().addCallbackParam("Method", "openEditDialogDiemDo");
                    PrimeFaces.current().ajax().addCallbackParam("maDD", listDiemDoSelected.get(0).getMaDiemdo());
                } else {
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để sửa"));
                    PrimeFaces.current().ajax().update("formNhom:messages");
                }
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để sửa"));
                PrimeFaces.current().ajax().update("formNhom:messages");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    //Open dialog when click on Delete button
    public void onDeleteDiemDo() {
        try {
            if (!listDiemDoSelected.isEmpty()) {
                PrimeFaces.current().ajax().addCallbackParam("Method", "openDeleteDialogDiemDo");
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để xóa"));
                PrimeFaces.current().ajax().update("formNhom:messages");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Delete item from db when user confirm in DelDialog
    public void doDeleteDiemDo() {
        try {
            listDiemDoSelected.stream().forEach((item) -> {
                getIDiemDoRemote().delete(item.getMaDiemdo(), ADiemdo.class);
            });
            //update main page
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //transfer maDD to AXDialog and show it up
    public void onAX() {
        try {
            if (!listDiemDoSelected.isEmpty()) {
                if (listDiemDoSelected.size() == 1) {
                    PrimeFaces.current().ajax().addCallbackParam("Method", "openAXDialog");
                    PrimeFaces.current().ajax().addCallbackParam("maDD", listDiemDoSelected.get(0).getMaDiemdo());
                } else {
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để ánh xạ"));
                    PrimeFaces.current().ajax().update("formNhom:messages");
                }
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Thông báo", "Chọn một để ánh xạ"));
                PrimeFaces.current().ajax().update("formNhom:messages");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public List<ADiemdoNhom> getListDiemDoNhomSelected() {
        return listDiemDoNhomSelected;
    }

    public void setListDiemDoNhomSelected(List<ADiemdoNhom> listDiemDoNhomSelected) {
        this.listDiemDoNhomSelected = listDiemDoNhomSelected;
    }

    public List<ADiemdo> getListDiemDoSelected() {
        return listDiemDoSelected;
    }

    public void setListDiemDoSelected(List<ADiemdo> listDiemDoSelected) {
        this.listDiemDoSelected = listDiemDoSelected;
    }

    public String getNgayVHToString() {
        return ngayVHToString;
    }

    public void setNgayVHToString(String ngayVHToString) {
        this.ngayVHToString = ngayVHToString;
    }

    public List<ADiemdoNhom> getListDiemDoNhom() {
        return listDiemDoNhom;
    }

    public void setListDiemDoNhom(List<ADiemdoNhom> listDiemDoNhom) {
        this.listDiemDoNhom = listDiemDoNhom;
    }

    public List<ADiemdo> getListDiemdo() {
        return listDiemdo;
    }

    public void setListDiemdo(List<ADiemdo> listDiemdo) {
        this.listDiemdo = listDiemdo;
    }

    public IDiemDoRemote getIDiemDoRemote() {
        try {
            if (iDiemDoRemote == null) {
                iDiemDoRemote = (IDiemDoRemote) EjbContext.getLocalEJBRemote(IDiemDoRemote.class.getSimpleName());
            } else {
                EjbContext.LoginEJB();//Login lại khi gọi ejb
            }
        } catch (Exception ex) {
            return null;
        }
        return iDiemDoRemote;
    }

}
